import { Router, Request, Response } from 'express';
import { GoogleCalendarConnector } from '../connectors/google-calendar-connector';
import { CalendarTrainingService } from '../services/calendar-training-service';
import { log } from '../utils/logger';
import * as fs from 'fs';
import * as path from 'path';

const router = Router();

// 설정 로드
function loadCalendarConfig() {
  try {
    const configPath = path.join(process.cwd(), 'config', 'server-config.json');
    const configData = fs.readFileSync(configPath, 'utf8');
    const config = JSON.parse(configData);
    return config.googleCalendar;
  } catch (error) {
    log.error('Failed to load calendar config', error);
    return null;
  }
}

// Google Calendar 커넥터 초기화
let calendarConnector: GoogleCalendarConnector | null = null;
let trainingService: CalendarTrainingService | null = null;

function initializeCalendarServices() {
  const config = loadCalendarConfig();
  if (config && config.clientId && config.clientSecret) {
    calendarConnector = new GoogleCalendarConnector({
      clientId: config.clientId,
      clientSecret: config.clientSecret,
      redirectUri: config.redirectUri
    });
    trainingService = new CalendarTrainingService(calendarConnector);
    log.info('Google Calendar services initialized');
  } else {
    log.warn('Google Calendar not configured - some features will be unavailable');
  }
}

// 서비스 초기화
initializeCalendarServices();

/**
 * Google OAuth2 인증 URL 생성
 */
router.get('/auth/url', (req: Request, res: Response) => {
  try {
    if (!calendarConnector) {
      return res.status(503).json({
        success: false,
        error: {
          code: 'SERVICE_UNAVAILABLE',
          message: 'Google Calendar service not configured'
        }
      });
    }

    const authUrl = calendarConnector.generateAuthUrl();
    
    res.json({
      success: true,
      data: {
        authUrl: authUrl,
        message: 'Visit this URL to authorize Google Calendar access'
      }
    });
  } catch (error) {
    log.error('Failed to generate auth URL', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'AUTH_URL_FAILED',
        message: 'Failed to generate authorization URL'
      }
    });
  }
});

/**
 * Google OAuth2 콜백 처리
 */
router.get('/auth/callback', async (req: Request, res: Response) => {
  try {
    if (!calendarConnector) {
      return res.status(503).json({
        success: false,
        error: {
          code: 'SERVICE_UNAVAILABLE',
          message: 'Google Calendar service not configured'
        }
      });
    }

    const { code } = req.query;
    
    if (!code || typeof code !== 'string') {
      return res.status(400).json({
        success: false,
        error: {
          code: 'INVALID_CODE',
          message: 'Authorization code is required'
        }
      });
    }

    const result = await calendarConnector.exchangeCodeForTokens(code);
    
    if (result.success) {
      res.json({
        success: true,
        data: {
          message: 'Google Calendar authorization successful',
          tokens: result.data
        }
      });
    } else {
      res.status(400).json(result);
    }
  } catch (error) {
    log.error('Failed to handle auth callback', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'AUTH_CALLBACK_FAILED',
        message: 'Failed to process authorization callback'
      }
    });
  }
});

/**
 * 인증 상태 확인
 */
router.get('/auth/status', async (req: Request, res: Response) => {
  try {
    if (!calendarConnector) {
      return res.status(503).json({
        success: false,
        error: {
          code: 'SERVICE_UNAVAILABLE',
          message: 'Google Calendar service not configured'
        }
      });
    }

    const result = await calendarConnector.getAuthStatus();
    res.json(result);
  } catch (error) {
    log.error('Failed to check auth status', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'AUTH_STATUS_FAILED',
        message: 'Failed to check authentication status'
      }
    });
  }
});

/**
 * 캘린더 목록 조회
 */
router.get('/calendars', async (req: Request, res: Response) => {
  try {
    if (!calendarConnector) {
      return res.status(503).json({
        success: false,
        error: {
          code: 'SERVICE_UNAVAILABLE',
          message: 'Google Calendar service not configured'
        }
      });
    }

    const result = await calendarConnector.getCalendarList();
    res.json(result);
  } catch (error) {
    log.error('Failed to get calendar list', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'CALENDAR_LIST_FAILED',
        message: 'Failed to retrieve calendar list'
      }
    });
  }
});

/**
 * 새 캘린더 생성
 */
router.post('/calendars', async (req: Request, res: Response) => {
  try {
    if (!calendarConnector) {
      return res.status(503).json({
        success: false,
        error: {
          code: 'SERVICE_UNAVAILABLE',
          message: 'Google Calendar service not configured'
        }
      });
    }

    const { summary, description, timeZone, backgroundColor, foregroundColor } = req.body;
    
    if (!summary) {
      return res.status(400).json({
        success: false,
        error: {
          code: 'MISSING_SUMMARY',
          message: 'Calendar summary (name) is required'
        }
      });
    }

    const result = await calendarConnector.createCalendar({
      summary,
      description,
      timeZone,
      backgroundColor,
      foregroundColor
    });
    
    res.json(result);
  } catch (error) {
    log.error('Failed to create calendar', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'CALENDAR_CREATE_FAILED',
        message: 'Failed to create calendar'
      }
    });
  }
});

/**
 * ClariVein 훈련 일정 생성
 */
router.post('/training/schedule', async (req: Request, res: Response) => {
  try {
    if (!trainingService) {
      return res.status(503).json({
        success: false,
        error: {
          code: 'SERVICE_UNAVAILABLE',
          message: 'Training service not configured'
        }
      });
    }

    const {
      operationDate,
      currentDaysSinceOperation,
      trainingTime,
      trainingDuration,
      location,
      calendarId,
      includeWeekends,
      includeMedicalSchedule
    } = req.body;

    // 필수 필드 검증
    if (!operationDate || currentDaysSinceOperation === undefined) {
      return res.status(400).json({
        success: false,
        error: {
          code: 'MISSING_REQUIRED_FIELDS',
          message: 'operationDate and currentDaysSinceOperation are required'
        }
      });
    }

    // 기본값 설정
    const config = loadCalendarConfig();
    const request = {
      operationDate,
      currentDaysSinceOperation,
      trainingTime: trainingTime || config?.defaultTrainingTime || '07:00',
      trainingDuration: trainingDuration || 60,
      location: {
        gym: location?.gym || config?.defaultLocations?.gym || '헬스장',
        pool: location?.pool || config?.defaultLocations?.pool || '수영장',
        park: location?.park || config?.defaultLocations?.park || '공원',
        hospital: location?.hospital || config?.defaultLocations?.hospital || '병원'
      },
      calendarId: calendarId || 'primary',
      includeWeekends: includeWeekends !== false, // 기본값 true
      includeMedicalSchedule: includeMedicalSchedule !== false // 기본값 true
    };

    const result = await trainingService.createTrainingSchedule(request);
    res.json(result);
  } catch (error) {
    log.error('Failed to create training schedule', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'TRAINING_SCHEDULE_FAILED',
        message: 'Failed to create training schedule'
      }
    });
  }
});

/**
 * 특정 날짜의 훈련 일정 조회
 */
router.get('/training/schedule/:date', async (req: Request, res: Response) => {
  try {
    if (!trainingService) {
      return res.status(503).json({
        success: false,
        error: {
          code: 'SERVICE_UNAVAILABLE',
          message: 'Training service not configured'
        }
      });
    }

    const { date } = req.params;
    const { calendarId } = req.query;

    const result = await trainingService.getTrainingScheduleForDate(
      date,
      calendarId as string
    );
    
    res.json(result);
  } catch (error) {
    log.error('Failed to get training schedule', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'GET_SCHEDULE_FAILED',
        message: 'Failed to retrieve training schedule'
      }
    });
  }
});

/**
 * 훈련 완료 표시
 */
router.patch('/training/complete/:eventId', async (req: Request, res: Response) => {
  try {
    if (!trainingService) {
      return res.status(503).json({
        success: false,
        error: {
          code: 'SERVICE_UNAVAILABLE',
          message: 'Training service not configured'
        }
      });
    }

    const { eventId } = req.params;
    const { notes, calendarId } = req.body;

    const result = await trainingService.markTrainingComplete(
      eventId,
      notes,
      calendarId || 'primary'
    );
    
    res.json(result);
  } catch (error) {
    log.error('Failed to mark training complete', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'MARK_COMPLETE_FAILED',
        message: 'Failed to mark training as complete'
      }
    });
  }
});

/**
 * 이벤트 생성
 */
router.post('/events', async (req: Request, res: Response) => {
  try {
    if (!calendarConnector) {
      return res.status(503).json({
        success: false,
        error: {
          code: 'SERVICE_UNAVAILABLE',
          message: 'Google Calendar service not configured'
        }
      });
    }

    const eventData = req.body;
    
    if (!eventData.title || !eventData.startDateTime || !eventData.endDateTime) {
      return res.status(400).json({
        success: false,
        error: {
          code: 'MISSING_REQUIRED_FIELDS',
          message: 'title, startDateTime, and endDateTime are required'
        }
      });
    }

    const result = await calendarConnector.createEvent(eventData);
    res.json(result);
  } catch (error) {
    log.error('Failed to create event', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'EVENT_CREATE_FAILED',
        message: 'Failed to create calendar event'
      }
    });
  }
});

/**
 * 이벤트 조회
 */
router.get('/events', async (req: Request, res: Response) => {
  try {
    if (!calendarConnector) {
      return res.status(503).json({
        success: false,
        error: {
          code: 'SERVICE_UNAVAILABLE',
          message: 'Google Calendar service not configured'
        }
      });
    }

    const {
      calendarId,
      timeMin,
      timeMax,
      query,
      maxResults,
      orderBy
    } = req.query;

    const filter = {
      calendarId: calendarId as string,
      timeMin: timeMin as string,
      timeMax: timeMax as string,
      query: query as string,
      maxResults: maxResults ? parseInt(maxResults as string) : undefined,
      orderBy: (orderBy as 'startTime' | 'updated') || 'startTime'
    };

    const result = await calendarConnector.getEvents(filter);
    res.json(result);
  } catch (error) {
    log.error('Failed to get events', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'EVENTS_GET_FAILED',
        message: 'Failed to retrieve calendar events'
      }
    });
  }
});

/**
 * 이벤트 업데이트
 */
router.patch('/events/:eventId', async (req: Request, res: Response) => {
  try {
    if (!calendarConnector) {
      return res.status(503).json({
        success: false,
        error: {
          code: 'SERVICE_UNAVAILABLE',
          message: 'Google Calendar service not configured'
        }
      });
    }

    const { eventId } = req.params;
    const { calendarId, ...eventData } = req.body;

    const result = await calendarConnector.updateEvent(
      eventId,
      eventData,
      calendarId || 'primary'
    );
    
    res.json(result);
  } catch (error) {
    log.error('Failed to update event', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'EVENT_UPDATE_FAILED',
        message: 'Failed to update calendar event'
      }
    });
  }
});

/**
 * 이벤트 삭제
 */
router.delete('/events/:eventId', async (req: Request, res: Response) => {
  try {
    if (!calendarConnector) {
      return res.status(503).json({
        success: false,
        error: {
          code: 'SERVICE_UNAVAILABLE',
          message: 'Google Calendar service not configured'
        }
      });
    }

    const { eventId } = req.params;
    const { calendarId } = req.query;

    const result = await calendarConnector.deleteEvent(
      eventId,
      calendarId as string || 'primary'
    );
    
    res.json(result);
  } catch (error) {
    log.error('Failed to delete event', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'EVENT_DELETE_FAILED',
        message: 'Failed to delete calendar event'
      }
    });
  }
});

export default router; 